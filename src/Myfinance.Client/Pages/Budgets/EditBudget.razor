@page "/budgets/edit/{Id:guid}"
@inject HttpClient Http
@inject NavigationManager Nav

<h3>Editar Presupuesto</h3>

@if (model is null)
{
    <p><em>Cargando.</em></p>
}
else
{
    <EditForm Model="model" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label>A�o</label>
            <InputNumber @bind-Value="model.Year" class="form-control" />
        </div>
        <div class="mb-3">
            <label>Mes</label>
            <InputNumber @bind-Value="model.Month" class="form-control" Min="1" Max="12" />
        </div>
        <div class="mb-3">
            <label>Monto</label>
            <InputNumber @bind-Value="model.Amount" class="form-control" />
        </div>
        <div class="mb-3">
            <label>Umbral Alerta (%)</label>
            <InputNumber @bind-Value="model.AlertThreshold" class="form-control" Step="0.01" />
        </div>

        <button type="submit" class="btn btn-primary">Actualizar</button>
        <button type="button" class="btn btn-secondary" @onclick="() => GoBack()">Cancelar</button>
    </EditForm>
}

@code {
    [Parameter] public Guid Id { get; set; }

    BudgetDto? model;

    protected override async Task OnInitializedAsync()
    {
        // 1) Obtener la transacción por id
        model = await Http.GetFromJsonAsync<BudgetDto>($"api/budget/{Id}");            
    }

    async Task HandleValidSubmit()
    {        
        // 2) Enviar PUT para actualizar
        var resp = await Http.PutAsJsonAsync($"api/budget/{Id}", model);
        if (resp.IsSuccessStatusCode)
        {
            Nav.NavigateTo("/budgets");
        }
        else
        {
            var mensaje = await resp.Content.ReadAsStringAsync();
            Console.Error.WriteLine($"Error al guardar: {resp.StatusCode} – {mensaje}");
        }
    }
    void GoBack() => Nav.NavigateTo("/budgets");
}
