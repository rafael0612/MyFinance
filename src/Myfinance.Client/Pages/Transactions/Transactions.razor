@page "/transactions"
@inject HttpClient Http
@inject NavigationManager Nav

<h3>Transacciones</h3>

<p>
    <a class="btn btn-outline-primary" href="transactions/add">+ Nueva Transacción</a>
    <a class="btn btn-outline-success" href="importar-transacciones">+ Importar Transacciónes Excel/CSV</a>
    <a class="btn btn-outline-secondary" href="sincronizar-emails">+ Sincronizar Emails</a>
</p>

<!-- FILTROS -->
<div class="row g-3 mb-4">
    <div class="col-md-2">
        <label class="form-label">Desde</label>
        <InputDate @bind-Value="filterStart" class="form-control" />
    </div>
    <div class="col-md-2">
        <label class="form-label">Hasta</label>
        <InputDate @bind-Value="filterEnd" class="form-control" />
    </div>
    <div class="col-md-2">
        <label class="form-label">Tipo Transacción</label>
        <InputSelect @bind-Value="filterTransactionType" class="form-control">
            <option value="">Todas</option>
            <option value="Income">Ingreso</option>
            <option value="Expense">Gasto</option>
        </InputSelect>
    </div>
    <div class="col-md-3">
        <label class="form-label">Descripción</label>
        <InputText @bind-Value="filterDescription" class="form-control" placeholder="Texto libre..." />
    </div>
    <div class="col-md-1 d-flex align-items-end">
        <button class="btn btn-primary w-100" @onclick="LoadTransactionsAsync">Filtrar</button>
    </div>
</div>

<!-- ORDEN -->
<div class="row align-items-end mb-4">
    <div class="col-md-3">
        <label class="form-label">Ordenar por</label>
        <InputSelect @bind-Value="sortField" class="form-control">
            <option value="Date">Fecha</option>
            <option value="TransactionType">Tipo de Trasnsacción</option>
            <option value="Description">Descripción</option>
            <option value="Amount">Monto</option>
        </InputSelect>
    </div>
    <div class="col-md-2">
        <div class="form-check mt-4">
            <InputCheckbox @bind-Value="sortDesc" class="form-check-input" id="sortDesc" />
            <label class="form-check-label" for="sortDesc">Descendente</label>
        </div>
    </div>
</div>

@if (transactions is null)
{
    <p><em>Cargando…</em></p>
}
else if (!transactions.Any())
{
    <p>No hay transacciones.</p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Nro</th>
                <th>Fecha</th>
                <th>Tipo de Transacción</th>
                <th class="text-end">Monto</th>
                <th>Descripción</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var t in transactions)
            {
                if(t.TransactionType == "Income")
                {
                    amountClass = "text-success fw-bold";
                }
                else if(t.TransactionType == "Expense")
                {
                    amountClass = "text-danger fw-bold";
                }
                else
                {
                    amountClass = string.Empty;
                }
                <tr>
                    <td>@id</td>
                    <td>@t.Date.ToShortDateString()</td>                    
                    <td>
                        @(t.TransactionType == "Income" ? "Ingreso" : t.TransactionType == "Expense" ? "Gasto" : t.TransactionType)
                    </td>
                    <td class="text-end @amountClass">@t.Amount.ToString("C")</td>
                    <td>@t.Description</td>
                    <td>
                        <a class="btn btn-sm btn-secondary" href="transactions/edit/@t.Id">Editar</a>
                        <button class="btn btn-sm btn-danger" @onclick="() => Delete(t.Id)">
                            Eliminar
                        </button>
                    </td>
                </tr>
                id++;
            }
        </tbody>
    </table>
}
@code {
    List<TransactionDto> transactions = new();
    // filtros
    private DateTime? filterStart;
    private DateTime? filterEnd;
    private string filterTransactionType = "";
    private string filterDescription = "";
    // ordenamiento
    private string sortField = "Date";
    private bool sortDesc;
    private int id = 1;
    private string amountClass = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        // Inicializa al mes actual por defecto
        var hoy = DateTime.Today;
        filterStart = new DateTime(hoy.Year, hoy.Month, 1);
        filterEnd = hoy;
        await LoadTransactionsAsync();
    }
    private async Task LoadTransactionsAsync()
    {
        try
        {
            // Construye parámetros de consulta
            var query = new Dictionary<string, string>();
            if (filterStart.HasValue)
                query["startDate"] = filterStart.Value.ToString("yyyy-MM-dd");
            if (filterEnd.HasValue)
                query["endDate"] = filterEnd.Value.ToString("yyyy-MM-dd");
            if (!string.IsNullOrWhiteSpace(filterTransactionType))
                query["transactionType"] = filterTransactionType;
            if (!string.IsNullOrWhiteSpace(filterDescription))
                query["description"] = filterDescription;
            query["sortField"] = sortField;
            query["sortDesc"] = sortDesc.ToString();

            var url = QueryHelpers.AddQueryString("api/transactions", query!);
            transactions = await Http.GetFromJsonAsync<List<TransactionDto>>(url) ?? new List<TransactionDto>();
            id = 1;
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error cargando transacciones: {ex.Message}");
            transactions = new List<TransactionDto>();
        }
    }
    async Task Delete(Guid id)
    {
        try
        {
            var response = await Http.DeleteAsync($"api/transactions/{id}");
            if (response.IsSuccessStatusCode)
            {
                transactions = transactions.Where(t => t.Id != id).ToList();
            }
            else
            {
                var msg = await response.Content.ReadAsStringAsync();
                Console.Error.WriteLine($"Error al eliminar: {response.StatusCode} – {msg}");
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Excepción eliminando transacción: {ex.Message}");
        }
        finally
        {
            // Recargar transacciones después de eliminar
            await LoadTransactionsAsync();
        }
    }
}