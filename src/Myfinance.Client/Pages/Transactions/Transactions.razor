@page "/transactions"
@inject HttpClient Http
@inject NavigationManager Nav
@using MyFinance.Client.Models

<h3>Transacciones</h3>

<p>
    <a class="btn btn-primary" href="transactions/add">+ Nueva Transacción</a>
</p>

@if (transactions is null)
{
    <p><em>Cargando…</em></p>
}
else if (!transactions.Any())
{
    <p>No hay transacciones.</p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Fecha</th>
                <th>Categoría</th>
                <th class="text-end">Monto</th>
                <th>Descripción</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var t in transactions)
            {
                <tr>
                    <td>@t.Date.ToShortDateString()</td>
                    <td>@t.Category</td>
                    <td class="text-end">@t.Amount.ToString("C")</td>
                    <td>@t.Description</td>
                    <td>
                        <a class="btn btn-sm btn-secondary" href="transactions/edit/@t.Id">Editar</a>
                        <button class="btn btn-sm btn-danger" @onclick="() => Delete(t.Id)">
                            Eliminar
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
@code {
    List<TransactionDto> transactions = new();
    protected override async Task OnInitializedAsync()
    {
        try
        {
            // 1) Llama primero con GetAsync()
            var response = await Http.GetAsync("api/transactions");
            if (!response.IsSuccessStatusCode)
            {
                // Si no es 200 OK, lee el HTML o mensaje de error
                var texto = await response.Content.ReadAsStringAsync();
                Console.Error.WriteLine($"Error {response.StatusCode}: {texto}");
                // Opcionalmente puedes mostrar un aviso en pantalla
                return;
            }
            // 2) Si OK, parsea el JSON
            transactions = await response.Content
            .ReadFromJsonAsync<List<TransactionDto>>()
            ?? new List<TransactionDto>();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Excepción cargando transacciones: {ex.Message}");
        }
    }
    async Task Delete(Guid id)
    {
        var respuesta = await Http.DeleteAsync($"api/transactions/{id}");
        if (respuesta.IsSuccessStatusCode)
        {
            transactions = transactions.Where(t => t.Id != id).ToList();
        }
        else
        {
            var msg = await respuesta.Content.ReadAsStringAsync();
            Console.Error.WriteLine($"Error al eliminar: {respuesta.StatusCode} – {msg}");
        }
    }
}